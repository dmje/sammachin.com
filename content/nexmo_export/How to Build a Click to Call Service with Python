Click-to-call is a common use case for voice applications. In this demo, we'll explain what the application looks like and show you how to build it.

There are several different versions of click-to-call but the use case is broadly similar: it allows you to place a piece of HTML content on your website that makes it easier (and cheaper) for your customers to talk to you. It is an alternative to just displaying your phone number.

This is a great way of boosting your conversions from customers just browsing your site to actually making contact with you.

The simplest form of click-to-call, which we will demonstrate here, asks customers to enter their contact number into a form on the page (as well as other optional information) and then sets up a call between you and them. They await an immediate callback and you receive an inbound call with an announcement of who the customer is. More advanced applications sometimes embed the voice call into the browser using technology like WebRTC, but that will require customers to have a compatible browser and be ready with a microphone or headset, something that is still not quite ubiquitous yet.

The call flow is as follows: we make a request to the Nexmo Voice API asking it to place an outbound call to the business phone number. When that call is answered, we return an NCCO to the Voice API, which will announce the call and then connect the call via another outbound call to the customer. It's important to do it this way around as when the customer answers the call they will be expecting the business to be on the line. By announcing the call to the business first using text to speech, the person at the company also knows what is happening. However, it's also important to brief your staff about how this works and run through a couple of practice scenarios to ensure that everyone has a good experience.

This flow diagram shows how the call is set up:
<a href="https://www.nexmo.com/wp-content/uploads/2017/06/Screen-Shot-2017-06-15-at-11.37.25.png"><img src="https://www.nexmo.com/wp-content/uploads/2017/06/Screen-Shot-2017-06-15-at-11.37.25.png" alt="" class="alignnone size-full wp-image-14215" /></a>
The example code is on our <a href="https://github.com/nexmo-community/click2call">Community GitHub</a>. You can even deploy your own version to Heroku by clicking on the purple button and entering a few credentials such as your Nexmo account and where you want the calls to be connected to.

The application essentially exposes three URLs/functions. The first one is the root `/`. This serves up an HTML page from the path 'static/index.html', which is the page your customers would use to enter their phone number and their name. <a href="https://www.nexmo.com/wp-content/uploads/2017/06/Screen-Shot-2017-06-15-at-11.30.39.png"><img src="https://www.nexmo.com/wp-content/uploads/2017/06/Screen-Shot-2017-06-15-at-11.30.39.png" alt="" class="alignnone size-full wp-image-14203" /></a>

When the customer submits their details on that page it is then posted to `/call`. This function is where most of the work happens. We take the data from the customer's request and construct a new URL from it to `/ncco` with the customer's number and name as query string parameters. We then make a request to the Nexmo REST API to initiate a call to the business number (stored in the application config). When that call is answered, the Nexmo Voice API should make a request to the URL we constructed at `/ncco`.

```python
class CallHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def post(self):
		data = json.loads(self.request.body)
		client = nexmo.Client(application_id=application_id, private_key=private_key, key='dummy', secret='dummy') #Dummy values for key and secret as the lib requires them even though they are not used
		request = {
		  'to': [{'type': 'phone', 'number': mynumber}],
		  'from': {'type': 'phone', 'number': mylvn},
		  'answer_url': ['https://{}/ncco?name={}&number={}'.format(url, data['name'], data['number'])]
		}
		print request
		response = client.create_call(request)
		self.write(response)
		self.finish()
```


The `/ncco` URL responds back with a dynamically generated NCCO based on the template at `ncco.json`, but it fills in the customer's Name and their phone number for the call to be connected to.
```python
class NCCOHandler(tornado.web.RequestHandler):
    @tornado.web.asynchronous
    def get(self):
		data={}
		data['name'] = self.get_argument('name')
		data['number'] = self.get_argument('number')
		data['url'] = url
		data['lvn'] = mylvn
		filein = open('ncco.json')
		src = Template(filein.read())
		filein.close()
		ncco = json.loads(src.substitute(data))
		self.write(json.dumps(ncco))
		self.set_header("Content-Type", 'application/json')
		self.finish()
```
This is what the NCCO template looks like. The fields `$name` and `$number` are replaced with information from the customer. The `$url` and `$lvn` fields are part of the applications configuration.
```json
[
  {
    "action": "talk",
    "text": "This is click to call, we are now connecting you to $name, please wait"
  },
  {
    "action": "connect",
    "eventUrl": ["https://$url/events"],
    "timeout": "45",
    "from": "$lvn",
     "endpoint": [
      {
        "type": "phone",
        "number": "$number"
      }
    ]
  }
]
```